#include  <iostream>
#include <fstream>

using namespace std;

class Time {    //класс Время
	int hours;  //часы
	int minutes;  //минуты
	int seconds;  //секунды
public:
	Time();   //конструктор умолчания
	Time(int h, int m, int s);   //конструктор от трёх целых чисел - кол-ва часов, минут, секунд. 
	Time(char* way);  //конструктор от пути до файла

	friend Time* inputFile(char* way);  //функция получения экземпляра классак из данных в файле
	void outputFile(char* way);  //функция записи времени в файл
	void print();  //функция печати времени на экран
	void calculate(int sec);  //функция вычитания кол-ва секунд из заданного в классе времени. результат сохраняется в том же экземпляре класса, где было изначальное время.
};

Time::Time()
{
	hours = minutes = seconds = 0;
}

Time::Time(int h, int m, int s)
{
	hours = h;
	minutes = m;
	seconds = s;
}

Time::Time(char* way)
{
	ifstream in(way);   //открытие файла для чтения
	if (!in.is_open())   //проверка на правильность открытия файла
	{
		cout << "File error!" << endl;  //вывод ошибки и завершение функции, если не открылось
		return;
	}
	in >> hours >> minutes >> seconds;  //считывание данных из файла
	in.close();   //закрытие файла
}

Time* inputFile(char* way)
{
	return new Time(way);  //возвращает новый экземпляр класса, созданный в динамической памяти через конструктор от пути файла
}

void Time::outputFile(char* way)
{
	ofstream out(way);  //открытие файла для записи
	if (!out.is_open())   //проверка на правильность открытия файла
	{
		cout << "File error!" << endl; //вывод ошибки и завершение функции, если не открылось
		return;
	}
	out << hours << " " << minutes << " " << seconds;  //запись данных в файл через пробел
	out.close();  //закрытие файла
}

void Time::print()  //здесь везде (в часах, минутах и секундах) выводится дополнительный ноль в начале если число меньше 10, чтобы запись всегда состояла из двух символов (как у электронных часов)
{
	if (hours < 10)
		cout << "0";
	cout << hours << ":";
	if (minutes < 10)
		cout << "0";
	cout << minutes << ":";
	if (seconds < 10)
		cout << "0";
	cout << seconds << endl;
}

void Time::calculate(int sec)
{
	if (sec <= seconds)  //если секунд нужно вычесть меньше, чем в текущем времени, то просто их вычитаем и всё
	{
		seconds -= sec;
		return;
	}
	sec -= seconds;  //убираем из нужного кол-ва секунд то кол-во, которое имеется в текущем времени
	seconds = 0; //в текущем времени остаётся 0 секунд
	while (sec >= 60)  //пока кол-во вычитаемых секунд содержит в себе целые минуты, мы вычитаем по минуте
	{
		if (minutes > 0)  //если минут больше нуля, топросто уменьшаем их кол-во на 1
			minutes--;
		else  //если нет, то должны уменьшить час на 1
		{
			minutes = 59;  //минут тогда будет 59
			if (hours > 0)  //если часов больше 0, то уменьшаем их на 1, иначе переходим в прошлые сутки, кол-во часов становится 23
				hours--;
			else
				hours = 23;
		}
		sec -= 60;  //кол-во вычитаемых секунд уменьшается на 60
	}
	if (sec > 0)  //если ещё остались какие-то секунды для вычитания
	{
		if (minutes > 0)  //аналогично прошлому уменьшаем время на 1 минуту
			minutes--;
		else
		{
			minutes = 59;
			if (hours > 0)
				hours--;
			else
				hours = 23;
		}
		seconds = 60 - sec;  //из полной минуты (60 секунд) вычитаем кол-во оставшихся для вычитания секунд
	}
}

int main(int argc, char* argv[])
{
	if (argc != 3)  //проверяем на правильное кол-во аргументов программы, если неверное, то выводим ошибку и завершаемся
	{
		cout << "arguments error!" << endl;
		return 0;
	}
	char wayIn[256];  //путь до файла исходного
	char wayOut[256];  //путь до файла конечного
	strcpy_s(wayIn, argv[1]);  //запись путей в локальные переменные
	strcpy_s(wayOut, argv[2]);
	Time* it;  //указатель на экземпляр класса
	it = inputFile(wayIn);  //создание экземпляра класса по данным из файла
	cout << "input number of seconds:" << endl;  //запрос кол-ва секунд для вычитания от пользователя
	int sec;
	cin >> sec;
	it->calculate(sec);  //вычитание кол-ва секунд из текущего времени
	cout << "result:" << endl;
	it->print();  //вывод результата на экран
	it->outputFile(wayOut);  //вывод результата в файл
	delete it;  //освобождение динамической памяти, выделенной под экземпляр класса.
	return 0;
}
